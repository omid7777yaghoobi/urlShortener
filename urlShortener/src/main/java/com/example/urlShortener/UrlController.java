package com.example.urlShortener;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.view.RedirectView;

import com.example.urlShortener.config.JwtTokenProvider;
import com.example.urlShortener.model.UrlMessage;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.seruco.encoding.base62.Base62;

// import com.example.urlShortener.Url;
import org.springframework.web.servlet.view.RedirectView;
import jakarta.servlet.http.HttpServletRequest;
import java.util.Enumeration;

import javax.crypto.spec.SecretKeySpec;
import javax.crypto.SecretKey;
import lombok.extern.slf4j.Slf4j;
import java.util.Map;


@Slf4j
@RestController // This means that this class is a Controller
// @RequestMapping(path="/url") // This means URL's start with /demo (after Application path)
public class UrlController {

  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UrlRepository urlRepository;


  @Value("${url-shortener.url-topic}")
  private String urlTopic;
  // private static final String TOPIC = "my-topic"; // Kafka topic name

  @Value("${url-shortener.jwt.secret}")
  private String plainSecret;

  // private final JwtTokenProvider tokenProvider;
  // private final MyClass myClass;

  @Autowired
  private KafkaTemplate<String, UrlMessage> kafkaTemplate;
  

  @GetMapping("/url/greeting")
  public String greeting() {
      return "Hello from Example Microservice!";
  }

  @GetMapping(path="/u/{urlString}")
  public RedirectView getOriginalUrl(@PathVariable("urlString") String urlString) {

    // This returns a JSON or XML with the users
    String server_addr = "127.0.0.1:8080/u/";
    List<Url> url_list = urlRepository.findByShortUrl(server_addr + urlString); 
    String original_url = url_list.get(0).getOriginalUrl();
    // String short_url = "127.0.0.1:8081/"

    return new RedirectView("http://" + original_url);
    // return original_url;
  }

  @GetMapping(path="/api/url")
  public ResponseEntity<?> getUrlsByOwner(HttpServletRequest request, @RequestHeader("Authorization") String bearerToken) {

    try {
      String token = bearerToken.substring(7);
      // Claims claims = Jwts.parserBuilder().setSigningKey(this.secretKey).build().parseClaimsJws(token).getBody();
      SecretKey secretKey = new SecretKeySpec(plainSecret.getBytes(), "HmacSHA256");
      Claims claims = Jwts.parserBuilder().setSigningKey(secretKey).build().parseClaimsJws(token).getBody();
      String owner = claims.getSubject(); 
      System.out.println("userName: " + owner);

      // This returns a JSON or XML with the users
      List<Url> url_list = urlRepository.findByOwner(owner);
      return ResponseEntity.ok(url_list);
    } catch (Exception e) {
      log.error("Internal Server Error: {}", e.getMessage());
      return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error: Fetching url metrics failed");
    }
  }

  @PostMapping(path="/api/url")
  public ResponseEntity<?> createNewUrl(@RequestBody addUrlRequestBody origUrl, @RequestHeader("Authorization") String bearerToken) {
    String originalUrl = origUrl.getUrl();
    try {

        String token = bearerToken.substring(7);
        SecretKey secretKey = new SecretKeySpec(plainSecret.getBytes(), "HmacSHA256");
        Claims claims = Jwts.parserBuilder().setSigningKey(secretKey).build().parseClaimsJws(token).getBody();
        String owner = claims.getSubject(); 
        System.out.println("userName: " + owner);


        Base62 base62 = Base62.createInstance();
        byte[] encoded = base62.encode(originalUrl.getBytes());
        String base62Encoded = new String(encoded);
        String urlId = base62Encoded.substring(0, 7);
        String shortUrl = "127.0.0.1:8080/u/" + urlId;
        // String shortUrl = base62Encoded.substring(0, 7);
      
        Url url = new Url();
        url.setOriginalUrl(origUrl.getUrl());
        url.setShortUrl(shortUrl);
        url.setOwner(owner);
        Url created_url = urlRepository.save(url);




        

        UrlMessage urlMessage = new UrlMessage(urlId, owner);
        kafkaTemplate.send(urlTopic, urlMessage);



        
        // return ResponseEntity.ok(created_url.getShortUrl());
        return ResponseEntity.ok(Map.of("short_url", created_url.getShortUrl()));
    } catch (DataIntegrityViolationException e) {
        String errorMessage = e.getMostSpecificCause().getMessage();

        // System.out.println("err" + errorMessage);

        if (errorMessage.contains(originalUrl)) {
          return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Error: Original URL already exists.");
        }
        // Unique constraint violation - handle the duplicate password scenario
        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Error: url Creation failed.");
    } catch (Exception e) {
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error: Url creation failed.");
    }

    // String originalUrl = origUrl.getUrl();

    // Base62 base62 = Base62.createInstance();
    // byte[] encoded = base62.encode(originalUrl.getBytes());
    // String base62Encoded = new String(encoded);
    // String shortUrl = "127.0.0.1:8080/short/" + base62Encoded.substring(0, 7);

    // Url url = new Url();
    // url.setOriginalUrl(origUrl.getUrl());
    // url.setShortUrl(shortUrl);
    // url.setOwner(owner);
    // urlRepository.save(url);
  }
}